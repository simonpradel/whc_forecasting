"""
This file provides an overview of the different files used in the code, which are organized into separate folders. 
It explains the purpose of each file and where it is used in the overall workflow.

combine_results: Contains functions that combine various results such as actuals, reconciliation forecasts, 
weighted forecasts, etc.
- combine_actuals_and_reconciliations.py: Combines actual values with reconciliation forecasts in the modified_method_weighted_aggregation.
- combine_weightedForecast_and_reconciliation.py: Combines weighted forecasts with reconciliation forecasts in the modified_method_weighted_aggregation.
- combine_weights_and_forecasts.py: Combines calculated weights with forecasts. The challenge lies in properly combining them when multiple forecasts are generated independently, used in the modified_method_weighted_aggregation.

evaluation: Contains functions for evaluating results.
- calculate_metrics.py: Calculates metrics for a forecast made over a validation period (where actuals are available). This is particularly used for the master thesis in modified_method_weighted_aggregation.

forecast: Contains functions related to creating forecasts for the test period and future periods.
- create_forecasts.py: Creates forecasts for the test period in the modified_method_weighted_aggregation.

load_data: Contains functions for loading data.
- load_data_from_catalog.py: Loads data from the catalog for use in the modified_method_weighted_aggregation.

methods: Contains functions that don't fall under other categories.
- get_function_args.py: A helper function that generates a dictionary with function parameters as keys and their corresponding argument values as values.
- split_data.py: Splits data into training and testing sets in the modified_method_weighted_aggregation.

models: Contains functions used for forecasting time series values, used in "calculate_weights_forecast" for forecasting in the training period and "create_forecasts" for forecasting in the test period.
- AutoARIMA.py: Time series forecasting model used in both create_forecasts and calculate_weights_forecast.
- AutoETS.py: Time series forecasting model used in both create_forecasts and calculate_weights_forecast.
- AutoGluon.py: Time series forecasting model used in both create_forecasts and calculate_weights_forecast.
- AutoTS.py: Time series forecasting model used in both create_forecasts and calculate_weights_forecast.

paper_results: Contains functions to generate results for the paper.
- calc_different_metrics_across_datasets.py: Calculates various metrics across datasets and settings, used in paper_tables.py.
- pivot_model_metrics.py: Creates a pivot table with average values of a given metric, used in paper_tables.py.
- rank_models_across_datasets.py: Ranks models across datasets based on a performance metric, used in paper_tables.py.

transformations: Contains functions for transforming data.
- aggregate_by_levels.py: Creates aggregations based on different grouping variables in the modified_method_weighted_aggregation.
- impute_ts.py: Adds missing monthly rows to DataFrames in a dictionary, used in prepare_data.py.
- prepare_data.py: Fills missing data and preprocesses data in the modified_method_weighted_aggregation.
- transform_aggregated_data.py: Transforms aggregated data using functions like transform_long_to_dict or transform_dict_to_long in the modified_method_weighted_aggregation.
- transform_multiple_dict_to_long.py: Transforms multiple dictionaries into the long format (transform_dict_to_long) in the modified_method_weighted_aggregation.

weights: Contains functions related to the calculation of weights.
- calculate_weights.py: Calculates weights based on forecasts made in the training period in the modified_method_weighted_aggregation.
- calculate_weights_forecast.py: Calculates forecasts for the training period in the modified_method_weighted_aggregation.
- compare_weighted_forecasts.py: Sorts the weights for later use in the modified_method_weighted_aggregation.
"""
